package com.bluespot.logic.adapters;

import com.bluespot.logic.Visitors;
import com.bluespot.logic.visitors.Visitor;

/**
 * A skeletal {@link HandledAdapter} implementation. This manages storing the
 * specified handler, but the semantics for when and how the handler is used is
 * ostensibly left to implementations.
 * 
 * @author Aaron Faanes
 * 
 * @param <S>
 *            the type of the source object used during conversion
 * @param <D>
 *            the final type of the converted or adapted object
 * @param <E>
 *            the type of the handled value
 */
public abstract class AbstractHandledAdapter<S, D, E> implements HandledAdapter<S, D, E> {

    private Visitor<? super E> handler;

    /**
     * Constructs a {@link AbstractHandledAdapter} that uses
     * {@link Visitors#noop()} as its handler.
     */
    public AbstractHandledAdapter() {
        this(Visitors.noop());
    }

    /**
     * Constructs a {@link AbstractHandledAdapter} that uses the specified
     * handler.
     * 
     * @param handler
     *            the handler that is notified of events generated by this
     *            adapter. It may not be null.
     * @throws NullPointerException
     *             if {@code handler} is null. Use {@link Visitors#noop()} or
     *             the zero-argument constructor if you don't need an active
     *             handler.
     */
    public AbstractHandledAdapter(final Visitor<? super E> handler) {
        this.setHandler(handler);
    }

    /**
     * Dispatches the specified value to this adapter's handler.
     * <p>
     * This is merely a convenience method for {@link Visitor#accept(Object)
     * this.getHandler().accept(value)}.
     * 
     * @param value
     *            the specified value that is dispatched. It may be null.
     */
    protected final void dispatch(final E value) {
        this.getHandler().accept(value);
    }

    @Override
    public final void setHandler(final Visitor<? super E> handler) {
        if (handler == null) {
            throw new NullPointerException("handler is null");
        }
        this.handler = handler;
    }

    /**
     * Returns the current handler used for this adapter.
     * 
     * @return the current handler used for this adapter
     */
    protected final Visitor<? super E> getHandler() {
        return this.handler;
    }

}
