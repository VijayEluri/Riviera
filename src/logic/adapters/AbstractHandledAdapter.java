package logic.adapters;

import logic.actors.Actor;
import logic.actors.Actors;

/**
 * A skeletal {@link HandledAdapter} implementation. This manages storing the
 * specified handler, but the semantics for when and how the handler is used is
 * ostensibly left to implementations.
 * 
 * @author Aaron Faanes
 * 
 * @param <S>
 *            the type of the source object used during conversion
 * @param <D>
 *            the final type of the converted or adapted object
 * @param <E>
 *            the type of the handled value
 */
public abstract class AbstractHandledAdapter<S, D, E> implements HandledAdapter<S, D, E> {

	private Actor<? super E> handler;

	/**
	 * Constructs a {@link AbstractHandledAdapter} that uses
	 * {@link Actors#noop()} as its handler.
	 */
	public AbstractHandledAdapter() {
		this(Actors.noop());
	}

	/**
	 * Constructs a {@link AbstractHandledAdapter} that uses the specified
	 * handler.
	 * 
	 * @param handler
	 *            the handler that is notified of events generated by this
	 *            adapter. It may not be null.
	 * @throws NullPointerException
	 *             if {@code handler} is null. Use {@link Actors#noop()} or the
	 *             zero-argument constructor if you don't need an active
	 *             handler.
	 */
	public AbstractHandledAdapter(final Actor<? super E> handler) {
		this.setHandler(handler);
	}

	/**
	 * Dispatches the specified value to this adapter's handler.
	 * <p>
	 * This is merely a convenience method for {@link Actor#receive(Object)
	 * this.getHandler().accept(value)}.
	 * 
	 * @param value
	 *            the specified value that is dispatched. It may be null.
	 */
	protected final void dispatch(final E value) {
		this.getHandler().receive(value);
	}

	@Override
	public final void setHandler(final Actor<? super E> handler) {
		if (handler == null) {
			throw new NullPointerException("handler is null");
		}
		this.handler = handler;
	}

	/**
	 * Returns the current handler used for this adapter.
	 * 
	 * @return the current handler used for this adapter
	 */
	protected final Actor<? super E> getHandler() {
		return this.handler;
	}

}
