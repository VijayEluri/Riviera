package logging;

import java.util.IllegalFormatException;
import java.util.logging.Level;
import java.util.logging.LogRecord;
import java.util.logging.Logger;

import reflection.CallStackFrame;
import reflection.CallStacks;

/**
 * Utility methods for convenient logging with {@code java.util.logging}. These
 * methods will attempt to find the correct logger using the package name of the
 * log record. For example, a message logged in {@code foo.bar.baz} should be
 * logged using a logger retrievable by {@link Logger#getLogger(String)
 * Logger.getLogger("foo.bar.baz")}.
 * 
 * @author Aaron Faanes
 */
public final class Logging {

	private static final String RECORD_ENTRY = "ENTRY";

	private static final String RECORD_THROWN = "THROW";

	private static final String RECORD_RETURN = "RETURN";

	private Logging() {
		// Suppresses default constructor, ensuring non-instantiability.
		throw new AssertionError("Instantiation not allowed");
	}

	static {
		// Register this package as an ignored package. It will not show up
		// in call stacks generated by the CallStacks methods
		CallStacks.ignorePackage(Logging.class.getPackage());
	}

	/**
	 * 
	 * Logs the specified message with the specified level of severity.
	 * 
	 * @param level
	 *            the level of severity used for this message
	 * @param message
	 *            the message to log
	 */
	public static void log(final Level level, final String message) {
		final LogRecord record = new LogRecord(level, message);
		Logging.logRecord(record);
	}

	/**
	 * Logs the specified message with the specified level of severity.
	 * <p>
	 * The message arguments will be inserted into the specified message using
	 * {@link String#format(String, Object...)}. The arguments will also be
	 * included as the parameters of the log record.
	 * 
	 * @param level
	 *            the level of severity
	 * @param formatMessage
	 *            the message to be formatted and subsequently logged
	 * @param parameters
	 *            the parameters to insert into the format message
	 * @throws IllegalFormatException
	 *             if the message cannot be formatted
	 */
	public static void log(final Level level, final String formatMessage, final Object... parameters) {
		final LogRecord record = new LogRecord(level, String.format(formatMessage, parameters));
		Logging.logRecord(record, parameters);
	}

	/**
	 * Logs the specified message with the specified level of severity. No
	 * formatting will occur.
	 * 
	 * @param level
	 *            the level of severity
	 * @param message
	 *            the message to log
	 * @param parameters
	 *            the parameters. They are not inserted into the specified
	 *            message
	 */
	public static void logUnformatted(final Level level, final String message, final Object... parameters) {
		final LogRecord record = new LogRecord(level, message);
		Logging.logRecord(record, parameters);
	}

	/**
	 * Logs the specified message with the specified level of severity. The
	 * thrown is included in the logged message.
	 * 
	 * @param level
	 *            the level of severity
	 * @param message
	 *            the message to log
	 * @param thrown
	 *            the throwable to log
	 */
	public static void logThrown(final Level level, final String message, final Throwable thrown) {
		final LogRecord record = new LogRecord(level, message);
		Logging.logRecord(record, thrown);
	}

	/**
	 * Logs the specified record.
	 * <p>
	 * The record's source class and method names will be generated using
	 * {@link CallStacks#getCurrentFrame()}. The record will be logged using the
	 * logger specified by the source class's package name.
	 * 
	 * @param record
	 *            the record to log
	 */
	public static void logRecord(final LogRecord record) {
		final CallStackFrame frame = CallStacks.getCurrentFrame();
		record.setSourceClassName(frame.getClassName());
		record.setSourceMethodName(frame.getMethodName());
		Logger.getLogger(frame.getPackageName()).log(record);
	}

	/**
	 * Logs the specified record, setting the parameters of the record to the
	 * specified varargs. No formatting will occur here; if you wish to have a
	 * formatted message, you must either call
	 * {@link String#format(String, Object...)} explicitly, or use one of the
	 * convenience methods in this class.
	 * <p>
	 * The record's source class and method names will be generated using
	 * {@link CallStacks#getCurrentFrame()}. The record will be logged using the
	 * logger specified by the source class's package name.
	 * 
	 * @param record
	 *            the record to log
	 * @param parameters
	 *            the parameters associated with the record
	 */
	public static void logRecord(final LogRecord record, final Object... parameters) {
		record.setParameters(parameters);
		Logging.logRecord(record);
	}

	/**
	 * Logs a specified record, setting the thrown property to the specified
	 * {@code Throwable}.
	 * <p>
	 * The record's source class and method names will be generated using
	 * {@link CallStacks#getCurrentFrame()}. The record will be logged using the
	 * logger specified by the source class's package name.
	 * 
	 * @param record
	 *            the record to log
	 * @param thrown
	 *            the throwable to register with the specified record
	 */
	public static void logRecord(final LogRecord record, final Throwable thrown) {
		record.setThrown(thrown);
		Logging.logRecord(record);
	}

	// -------------------------------------------------------------------------
	//
	// Standard Log-level messages
	//
	// -------------------------------------------------------------------------

	/**
	 * Logs the specified message with the default level of {@link Level#INFO}.
	 * 
	 * @param message
	 *            the message to log
	 * @see Logging#logInfo(String)
	 */
	public static void log(final String message) {
		Logging.logInfo(message);
	}

	/**
	 * Logs the specified message with the default level of {@link Level#INFO}.
	 * <p>
	 * The message arguments will be inserted into the specified message using
	 * {@link String#format(String, Object...)}.
	 * 
	 * @param formatMessage
	 *            the message to be formatted and subsequently logged
	 * @param parameters
	 *            the arguments to insert into the format message
	 * @throws IllegalFormatException
	 *             if the message cannot be formatted
	 * @see Logging#logInfo(String, Object...)
	 */
	public static void log(final String formatMessage, final Object... parameters) {
		Logging.logInfo(formatMessage, parameters);
	}

	/**
	 * Logs the specified throwable with a severity of {@link Level#WARNING}.
	 * 
	 * @param thrown
	 *            the throwable to log
	 * @see Logging#logThrown(Throwable)
	 */
	public static void log(final Throwable thrown) {
		Logging.logThrown(thrown);
	}

	/**
	 * Logs the specified message with the severity of {@link Level#CONFIG}.
	 * 
	 * @param message
	 *            the message to log
	 * @see Logger#config(String)
	 */
	public static void logConfig(final String message) {
		Logging.log(Level.CONFIG, message);
	}

	/**
	 * Logs the specified message with the level of {@link Level#CONFIG}.
	 * <p>
	 * The message arguments will be inserted into the specified message using
	 * {@link String#format(String, Object...)}.
	 * 
	 * @param formatMessage
	 *            the message to be formatted and subsequently logged
	 * @param parameters
	 *            the arguments to insert into the format message
	 * @throws IllegalFormatException
	 *             if the message cannot be formatted
	 * @see Logger#config(String)
	 */
	public static void logConfig(final String formatMessage, final Object... parameters) {
		Logging.log(Level.CONFIG, formatMessage, parameters);
	}

	/**
	 * Logs the specified message with the severity of {@link Level#INFO}.
	 * 
	 * @param message
	 *            the message to log
	 * @see Logger#info(String)
	 */
	public static void logInfo(final String message) {
		Logging.log(Level.INFO, message);
	}

	/**
	 * Logs the specified message with the level of {@link Level#CONFIG}.
	 * <p>
	 * The message arguments will be inserted into the specified message using
	 * {@link String#format(String, Object...)}.
	 * 
	 * @param formatMessage
	 *            the message to be formatted and subsequently logged
	 * @param parameters
	 *            the arguments to insert into the format message
	 * @throws IllegalFormatException
	 *             if the message cannot be formatted
	 * @see Logger#info(String)
	 */
	public static void logInfo(final String formatMessage, final Object... parameters) {
		Logging.log(Level.INFO, formatMessage, parameters);
	}

	/**
	 * Logs the specified message with the severity of {@link Level#FINE}.
	 * 
	 * @param message
	 *            the message to log
	 * @see Logger#fine(String)
	 */
	public static void logFine(final String message) {
		Logging.log(Level.FINE, message);
	}

	/**
	 * Logs the specified message with the level of {@link Level#FINE}.
	 * <p>
	 * The message arguments will be inserted into the specified message using
	 * {@link String#format(String, Object...)}.
	 * 
	 * @param formatMessage
	 *            the message to be formatted and subsequently logged
	 * @param parameters
	 *            the arguments to insert into the format message
	 * @throws IllegalFormatException
	 *             if the message cannot be formatted
	 * @see Logger#fine(String)
	 */
	public static void logFine(final String formatMessage, final Object... parameters) {
		Logging.log(Level.FINE, formatMessage, parameters);
	}

	/**
	 * Logs the specified message with the severity of {@link Level#FINER}.
	 * 
	 * @param message
	 *            the message to log
	 * @see Logger#finer(String)
	 */
	public static void logFiner(final String message) {
		Logging.logRecord(new LogRecord(Level.FINER, message));
	}

	/**
	 * Logs the specified message with the level of {@link Level#FINER}.
	 * <p>
	 * The message arguments will be inserted into the specified message using
	 * {@link String#format(String, Object...)}.
	 * 
	 * @param formatMessage
	 *            the message to be formatted and subsequently logged
	 * @param parameters
	 *            the arguments to insert into the format message
	 * @throws IllegalFormatException
	 *             if the message cannot be formatted
	 * @see Logger#finer(String)
	 */
	public static void logFiner(final String formatMessage, final Object... parameters) {
		Logging.log(Level.FINER, formatMessage, parameters);
	}

	/**
	 * Logs the specified message with the severity of {@link Level#FINEST}.
	 * 
	 * @param message
	 *            the message to log
	 * @see Logger#finest(String)
	 */
	public static void logFinest(final String message) {
		Logging.log(Level.FINEST, message);
	}

	/**
	 * Logs the specified message with the level of {@link Level#FINEST}.
	 * <p>
	 * The message arguments will be inserted into the specified message using
	 * {@link String#format(String, Object...)}.
	 * 
	 * @param formatMessage
	 *            the message to be formatted and subsequently logged
	 * @param parameters
	 *            the arguments to insert into the format message
	 * @throws IllegalFormatException
	 *             if the message cannot be formatted
	 * @see Logger#finest(String)
	 */
	public static void logFinest(final String formatMessage, final Object... parameters) {
		Logging.log(Level.FINEST, formatMessage, parameters);
	}

	/**
	 * Logs the specified message with the severity of {@link Level#WARNING}.
	 * 
	 * @param message
	 *            the message to log
	 * @see Logger#warning(String)
	 */
	public static void logWarning(final String message) {
		Logging.log(Level.WARNING, message);
	}

	/**
	 * Logs the specified message with the level of {@link Level#WARNING}.
	 * <p>
	 * The message arguments will be inserted into the specified message using
	 * {@link String#format(String, Object...)}.
	 * 
	 * @param formatMessage
	 *            the message to be formatted and subsequently logged
	 * @param parameters
	 *            the arguments to insert into the format message
	 * @throws IllegalFormatException
	 *             if the message cannot be formatted
	 * @see Logger#warning(String)
	 */
	public static void logWarning(final String formatMessage, final Object... parameters) {
		Logging.log(Level.WARNING, formatMessage, parameters);
	}

	/**
	 * Logs the specified message with the severity of {@link Level#SEVERE}.
	 * 
	 * @param message
	 *            the message to log
	 * @see Logger#severe(String)
	 */
	public static void logSevere(final String message) {
		Logging.log(Level.SEVERE, message);
	}

	/**
	 * Logs the specified message with the level of {@link Level#SEVERE}.
	 * <p>
	 * The message arguments will be inserted into the specified message using
	 * {@link String#format(String, Object...)}.
	 * 
	 * @param formatMessage
	 *            the message to be formatted and subsequently logged
	 * @param parameters
	 *            the arguments to insert into the format message
	 * @throws IllegalFormatException
	 *             if the message cannot be formatted
	 * @see Logger#severe(String)
	 */
	public static void logSevere(final String formatMessage, final Object... parameters) {
		Logging.log(Level.SEVERE, formatMessage, parameters);
	}

	// -------------------------------------------------------------------------
	//
	// Call-Stack Related Messages
	//
	// -------------------------------------------------------------------------

	/**
	 * Logs a method entry.
	 * 
	 * @see Logger#entering(String, String)
	 */
	public static void logEntry() {
		Logging.log(Level.FINER, Logging.RECORD_ENTRY);
	}

	/**
	 * Logs a method entry, with the specified parameters.
	 * 
	 * @param params
	 *            the parameters associated with the method entry
	 * 
	 * @see Logger#entering(String, String, Object[])
	 */
	public static void logEntry(final Object... params) {
		Logging.logUnformatted(Level.FINER, Logging.RECORD_ENTRY, params);
	}

	/**
	 * Logs that a throwable is about to be thrown.
	 * 
	 * @param thrown
	 *            the throwable to log
	 * @see Logger#throwing(String, String, Throwable)
	 */
	public static void logException(final Throwable thrown) {
		Logging.logThrown(thrown);
	}

	/**
	 * Logs that a throwable is about to be thrown.
	 * 
	 * @param thrown
	 *            the throwable to log
	 * @see Logger#throwing(String, String, Throwable)
	 */
	public static void logThrown(final Throwable thrown) {
		Logging.logThrown(Level.FINER, Logging.RECORD_THROWN, thrown);
	}

	/**
	 * Logs an exit from some method that is about to return.
	 * 
	 * @see Logger#exiting(String, String)
	 */
	public static void logReturn() {
		Logging.logExit();
	}

	/**
	 * Logs an exit from some method that is about to return the specified
	 * value.
	 * 
	 * @param returnValue
	 *            the value to log
	 * @see Logger#exiting(String, String, Object)
	 */
	public static void logReturn(final Object returnValue) {
		Logging.logExit(returnValue);
	}

	/**
	 * Logs an exit from some method that is about to return.
	 * 
	 * @see Logger#exiting(String, String)
	 */
	public static void logExit() {
		Logging.log(Level.FINER, Logging.RECORD_RETURN);
	}

	/**
	 * Logs an exit from some method that is about to return the specified
	 * value.
	 * 
	 * @param returnValue
	 *            the value to log
	 * @see Logger#exiting(String, String, Object)
	 */
	public static void logExit(final Object returnValue) {
		Logging.log(Level.FINER, Logging.RECORD_RETURN, returnValue);
	}

}
